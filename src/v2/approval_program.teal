#pragma version 2

// Handle each possible OnCompletion type. We don't have to worry about
// handling ClearState, because the ClearStateProgram will execute in that
// case, not the ApprovalProgram.

txn OnCompletion
int NoOp
==
bnz handle_noop

txn OnCompletion
int OptIn
==
bnz handle_optin

txn OnCompletion
int CloseOut
==
bnz handle_closeout

txn OnCompletion
int UpdateApplication
==
bnz handle_updateapp

txn OnCompletion
int DeleteApplication
==
bnz handle_deleteapp

// Unexpected OnCompletion value. Should be unreachable.
err

handle_noop:
// Handle NoOp

handle_optin:
// Handle OptIn

handle_closeout:
// Handle CloseOut

// By default, disallow updating or deleting the app. Add custom authorization
// logic below to allow updating or deletion in certain circumstances.
handle_updateapp:
handle_deleteapp:
err

// check if the app is being created
int 0
txn ApplicationID
==
bz not_creation

// store creator address
byte "Creator"
txn Sender
app_global_put

// verify that 5 arguments passed
txn NumAppArgs
int 5
==
bz failed

// store the start date
byte "StartDate"
txna ApplicationArgs 0
btoi
app_global_put

// store the end date
byte "EndDate"
txna ApplicationArgs 1
btoi
app_global_put

// store the id of bond
byte "AssetID"
txna ApplicationArgs 2
btoi
app_global_put

// store the cost of bond
byte "BondCost"
txna ApplicationArgs 3
btoi
app_global_put

// store the principal of bond
byte "BondPrincipal"
txna ApplicationArgs 4
btoi
app_global_put

// return false as approval
int 1
return

not_creation:
// check if this is update
int UpdateApplication
txn OnCompletion
==
bz not_update
// TODO HANDLE UPDATE
b failure

// check if this is NoOp transaction
int NoOp
txn OnCompletion
==
bz failed

// if here then application call
// verify there are three transactions in atomic transfer
// 0. call to this contract
// 1. transfer of algos 
// 2. transfer of bond
global GroupSize
int 3
==
gtxn 1 TypeEnum
int pay
==
gtxn 2 TypeEnum
int axfer
==
&&
&&
bz failed

// check if buying bond
txna ApplicationArgs 0
byte "buy"
==
bnz buy

// check if claiming principal
txna ApplicationArgs 0
byte "principal" 
==
bnz principal
b failed

buy:
// check if before start date
global LatestTimestamp
byte "StartDate"
app_global_get
<
bz failed

// verify creator is receiving algos and sender receiving bond
byte "Creator"
app_global_get
gtxn 1 Receiver
==
txn Sender
gtxn 2 AssetReceiver
==
&&
bz failed

// verify paying BondCost (per bond)
gtxn 1 Amount
gtxn 2 AssetAmount
/
byte "BondCost"
app_global_get
==
bnz success

principal:
// check if after end date
global LatestTimestamp
byte "EndDate"
app_global_get
>=
bz failed

// verify creator is receiving bond and sender receiving algos
byte "Creator"
app_global_get
gtxn 2 AssetReceiver
==
txn Sender
gtxn 1 Receiver
==
&&
bz failed

// verify paying BondPrincipal (per bond)
gtxn 1 Amount
gtxn 2 AssetAmount
/
byte "BondPrincipal"
app_global_get
==
bz failed

// return true as success
success:
int 1
return

// return false as failure
failed:
int 0
return
